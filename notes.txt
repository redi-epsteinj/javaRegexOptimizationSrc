Neg12To12BadEveryNumberOrd

(
	-400|
	-399|-398|-397|-396|-395|-394|-393|-392|-391|-390|-389|-388|-387|-386|-385|-384|-383|-382|-381|-380|
	-379|-378|-377|-376|-375|-374|-373|-372|-371|-370|-369|-368|-367|-366|-365|-364|-363|-362|-361|-360|
	-359|-358|-357|-356|-355|-354|-353|-352|-351|-350|-349|-348|-347|-346|-345|-344|-343|-342|-341|-340|
	-339|-338|-337|-336|-335|-334|-333|-332|-331|-330|-329|-328|-327|-326|-325|-324|-323|-322|-321|-320|
	-319|-318|-317|-316|-315|-314|-313|-312|-311|-310|-309|-308|-307|-306|-305|-304|-303|-302|-301|-300|
	-299|-298|-297|-296|-295|-294|-293|-292|-291|-290|-289|-288|-287|-286|-285|-284|-283|-282|-281|-280|
	-279|-278|-277|-276|-275|-274|-273|-272|-271|-270|-269|-268|-267|-266|-265|-264|-263|-262|-261|-260|
	-259|-258|-257|-256|-255|-254|-253|-252|-251|-250|-249|-248|-247|-246|-245|-244|-243|-242|-241|-240|
	-239|-238|-237|-236|-235|-234|-233|-232|-231|-230|-229|-228|-227|-226|-225|-224|-223|-222|-221|-220|
	-219|-218|-217|-216|-215|-214|-213|-212|-211|-210|-209|-208|-207|-206|-205|-204|-203|-202|-201|-200|
	-199|-198|-197|-196|-195|-194|-193|-192|-191|-190|-189|-188|-187|-186|-185|-184|-183|-182|-181|-180|
	-179|-178|-177|-176|-175|-174|-173|-172|-171|-170|-169|-168|-167|-166|-165|-164|-163|-162|-161|-160|
	-159|-158|-157|-156|-155|-154|-153|-152|-151|-150|-149|-148|-147|-146|-145|-144|-143|-142|-141|-140|
	-139|-138|-137|-136|-135|-134|-133|-132|-131|-130|-129|-128|-127|-126|-125|-124|-123|-122|-121|-120|
	-119|-118|-117|-116|-115|-114|-113|-112|-111|-110|-109|-108|-107|-106|-105|-104|-103|-102|-101|-100|
	-99|-98|-97|-96|-95|-94|-93|-92|-91|-90|-89|-88|-87|-86|-85|-84|-83|-82|-81|-80|-79|-78|-77|-76|-75|-74|-73|-72|-71|-70|
	-69|-68|-67|-66|-65|-64|-63|-62|-61|-60|-59|-58|-57|-56|-55|-54|-53|-52|-51|-50|-49|-48|-47|-46|-45|-44|-43|-42|-41|-40|
	-39|-38|-37|-36|-35|-34|-33|-32|-31|-30|-29|-28|-27|-26|-25|-24|-23|-22|-21|-20|-19|-18|-17|-16|-15|-14|-13|-12|-11|-10|
	-9|-8|-7|-6|-5|-4|-3|-2|-1|
	0|
	1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|
	31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59|60|
	61|62|63|64|65|66|67|68|69|70|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|88|89|90|
	91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|
	121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|
	151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|
	181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|
	211|212|213|214|215|216|217|218|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|
	241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|
	271|272|273|274|275|276|277|278|279|280|281|282|283|284|285|286|287|288|289|290|291|292|293|294|295|296|297|298|299|300|
	301|302|303|304|305|306|307|308|309|310|311|312|313|314|315|316|317|318|319|320|321|322|323|324|325|326|327|328|329|330|
	331|332|333|334|335|336|337|338|339|340|341|342|343|344|345|346|347|348|349|350|351|352|353|354|355|356|357|358|359|360|
	361|362|363|364|365|366|367|368|369|370|371|372|373|374|375|376|377|378|379|380|381|382|383|384|385|386|387|388|389|390|
	391|392|393|394|395|396|397|398|399|400
)

Benefits: Easy to understand, obviously correct, good basis to start optimizations with
Unmaintainable, massive redundancies, unbounded, capturing

100,000 iterations, 
Neg400To400EveryNumberOrd: 48,132,140,794 nanoseconds (48 seconds)

Neg400To400BadToGood01NonCapturingWithBounds: 

\b(?:
	-400|
	-399|-398|-397|-396|-395|-394|-393|-392|-391|-390|-389|-388|-387|-386|-385|-384|-383|-382|-381|-380|
	-379|-378|-377|-376|-375|-374|-373|-372|-371|-370|-369|-368|-367|-366|-365|-364|-363|-362|-361|-360|
	-359|-358|-357|-356|-355|-354|-353|-352|-351|-350|-349|-348|-347|-346|-345|-344|-343|-342|-341|-340|
	-339|-338|-337|-336|-335|-334|-333|-332|-331|-330|-329|-328|-327|-326|-325|-324|-323|-322|-321|-320|
	-319|-318|-317|-316|-315|-314|-313|-312|-311|-310|-309|-308|-307|-306|-305|-304|-303|-302|-301|-300|
	-299|-298|-297|-296|-295|-294|-293|-292|-291|-290|-289|-288|-287|-286|-285|-284|-283|-282|-281|-280|
	-279|-278|-277|-276|-275|-274|-273|-272|-271|-270|-269|-268|-267|-266|-265|-264|-263|-262|-261|-260|
	-259|-258|-257|-256|-255|-254|-253|-252|-251|-250|-249|-248|-247|-246|-245|-244|-243|-242|-241|-240|
	-239|-238|-237|-236|-235|-234|-233|-232|-231|-230|-229|-228|-227|-226|-225|-224|-223|-222|-221|-220|
	-219|-218|-217|-216|-215|-214|-213|-212|-211|-210|-209|-208|-207|-206|-205|-204|-203|-202|-201|-200|
	...|272|273|274|275|276|277|278|279|280|281|282|283|284|285|286|287|288|289|290|291|292|293|294|295|296|297|298|299|300|
	301|302|303|304|305|306|307|308|309|310|311|312|313|314|315|316|317|318|319|320|321|322|323|324|325|326|327|328|329|330|
	331|332|333|334|335|336|337|338|339|340|341|342|343|344|345|346|347|348|349|350|351|352|353|354|355|356|357|358|359|360|
	361|362|363|364|365|366|367|368|369|370|371|372|373|374|375|376|377|378|379|380|381|382|383|384|385|386|387|388|389|390|
	391|392|393|394|395|396|397|398|399|400
)\b

100,000 iterations, 
Neg400To400EveryNumberOrd:                    48,132,140,794 nanoseconds (48 seconds)
Neg400To400BadToGood01NonCapturingWithBounds: 36,131,648,016 (24.93%  faster than previous)

Neg400To400BadToGood02Dash: 

\b(?:
	(?<!-)0+|
	-?
	(?:
		1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|
		31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59|60|
		61|62|63|64|65|66|67|68|69|70|71|72|73|74|75|76|77|78|79|80|81|82|83|84|85|86|87|88|89|90|
		91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|
		121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|
		151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|
		181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|
		211|212|213|214|215|216|217|218|219|220|221|222|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|
		241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|
		271|272|273|274|275|276|277|278|279|280|281|282|283|284|285|286|287|288|289|290|291|292|293|294|295|296|297|298|299|300|
		301|302|303|304|305|306|307|308|309|310|311|312|313|314|315|316|317|318|319|320|321|322|323|324|325|326|327|328|329|330|
		331|332|333|334|335|336|337|338|339|340|341|342|343|344|345|346|347|348|349|350|351|352|353|354|355|356|357|358|359|360|
		361|362|363|364|365|366|367|368|369|370|371|372|373|374|375|376|377|378|379|380|381|382|383|384|385|386|387|388|389|390|
		391|392|393|394|395|396|397|398|399|400
	)
)\b

100,000 iterations, 
Neg400To400EveryNumberOrd:                    48,132,140,794 nanoseconds (48 seconds)
Neg400To400BadToGood01NonCapturingWithBounds: 36,131,648,016 (24.93%  faster than previous)
Neg400To400BadToGood02Dash:                   24,244,457,989 (32.89%     faster than previous, 49.62% faster than first)


Neg400To400BadToGood03ZeroToNine: 

\b(?:
	(?<!-)0+|
	-?
	(?:
		[0-9]|
		1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]|10[0-9]
		11[0-9]|12[0-9]|13[0-9]|14[0-9]|15[0-9]|16[0-9]|17[0-9]|18[0-9]|19[0-9]|20[0-9]
		21[0-9]|22[0-9]|23[0-9]|24[0-9]|25[0-9]|26[0-9]|27[0-9]|28[0-9]|29[0-9]|30[0-9]|
		31[0-9]|32[0-9]|33[0-9]|34[0-9]|35[0-9]|36[0-9]|37[0-9]|38[0-9]|39[0-9]|
		400
	)
)\b

100,000 iterations, 
Neg400To400EveryNumberOrd:                    48,132,140,794 nanoseconds (48 seconds)
Neg400To400BadToGood01NonCapturingWithBounds: 36,131,648,016 (24.93%  faster than previous)
Neg400To400BadToGood02Dash:                   24,244,457,989 (32.89%     faster than previous, 49.62% faster than first)
Neg400To400BadToGood03ZeroToNine:             17,512,494,230 (27.76%   faster than previous, 63.61% faster than first)

Neg400To400BadToGood04Tens: 

\b(?:
	(?<!-)0+|
	-?
	(?:
		[0-9]|
		[1-9][0-9]|
		1[0-9][0-9]|
		2[0-9][0-9]|
		3[0-9][0-9]|
		400
	)
)\b

100,000 iterations, 
Neg400To400EveryNumberOrd:                    48,132,140,794 nanoseconds (48 seconds)
Neg400To400BadToGood01NonCapturingWithBounds: 36,131,648,016 (24.93%  faster than previous)
Neg400To400BadToGood02Dash:                   24,244,457,989 (32.89%     faster than previous, 49.62% faster than first)
Neg400To400BadToGood03ZeroToNine:             17,512,494,230 (27.76%   faster than previous, 63.61% faster than first)
Neg400To400BadToGood04Tens:                    1,936,652,062 (88.94%   faster than previous, 95.97% faster than first)

Neg400To400BadToGood05Hundreds: 

\b(?:
	(?<!-)0+|
	-?
	(?:
		[0-9]|
		[1-9][0-9]|
		[1-3][0-9][0-9]|
		400
	)
)\b

100,000 iterations, 
Neg400To400EveryNumberOrd:                    48,132,140,794 nanoseconds (48 seconds)
Neg400To400BadToGood01NonCapturingWithBounds: 36,131,648,016 (24.93%  faster than previous)
Neg400To400BadToGood02Dash:                   24,244,457,989 (32.89%     faster than previous, 49.62% faster than first)
Neg400To400BadToGood03ZeroToNine:             17,512,494,230 (27.76%   faster than previous, 63.61% faster than first)
Neg400To400BadToGood04Tens:                    1,936,652,062 (88.94%   faster than previous, 95.97% faster than first)
Neg400To400BadToGood05Hundreds:               16,723,177,309 (-763.50%  faster than previous, 65.25% faster than first)

Neg400To400BadToGood06Consolidated: 

(?:
	(?<!-)0+|
	-?
	(?:
		[1-9]?[0-9]|
		[1-3][0-9]{2}|
		400
	)
)

100,000 iterations, 
Neg400To400EveryNumberOrd:                    48,132,140,794 nanoseconds (48 seconds)
Neg400To400BadToGood01NonCapturingWithBounds: 36,131,648,016 (24.93%  faster than previous)
Neg400To400BadToGood02Dash:                   24,244,457,989 (32.89%     faster than previous, 49.62% faster than first)
Neg400To400BadToGood03ZeroToNine:             17,512,494,230 (27.76%   faster than previous, 63.61% faster than first)
Neg400To400BadToGood04Tens:                    1,936,652,062 (88.94%   faster than previous, 95.97% faster than first)
Neg400To400BadToGood05Hundreds:               16,723,177,309 (-763.50%  faster than previous, 65.25% faster than first)
Neg400To400BadToGood06Consolidated:           17,972,542,268 (-7.47%  faster than previous, 62.65% faster than first)

Neg400To400BadToGood07EasiestOr1st: 

(?:
	(?<!-)0+|
	-?
	(?:
		400|
		[1-9]?[0-9]|
		[1-3][0-9]{2}
	)
)

100,000 iterations, 
Neg400To400EveryNumberOrd:                    48,132,140,794 nanoseconds (48 seconds)
Neg400To400BadToGood01NonCapturingWithBounds: 36,131,648,016 (24.93%  faster than previous)
Neg400To400BadToGood02Dash:                   24,244,457,989 (32.89%     faster than previous, 49.62% faster than first)
Neg400To400BadToGood03ZeroToNine:             17,512,494,230 (27.76%   faster than previous, 63.61% faster than first)
Neg400To400BadToGood04Tens:                    1,936,652,062 (88.94%   faster than previous, 95.97% faster than first)
Neg400To400BadToGood05Hundreds:               16,723,177,309 (-763.50%  faster than previous, 65.25% faster than first)
Neg400To400BadToGood07EasiestOr1st:           18,192,790,973 (-1.22% faster than previous, 62.20% faster than first)
Neg400To400BadToGood06Consolidated:           17,972,542,268 (-7.47%  faster than previous, 62.65% faster than first)

Neg400To400EvenBetter

-?
\b(?:
	400|
	[1-3]?[0-9]{1,2}
)\b


100,000 iterations, 
Neg400To400EveryNumberOrd:                    48,132,140,794 nanoseconds (48 seconds)
Neg400To400BadToGood01NonCapturingWithBounds: 36,131,648,016 (  24.93%   faster than previous)
Neg400To400BadToGood02Dash:                   24,244,457,989 (  32.89%   faster than previous, 49.62% faster than first)
Neg400To400BadToGood03ZeroToNine:             17,512,494,230 (  27.76%   faster than previous, 63.61% faster than first)
Neg400To400BadToGood04Tens:                    1,936,652,062 (  88.94%   faster than previous, 95.97% faster than first)
Neg400To400BadToGood05Hundreds:               16,723,177,309 (-763.50%   faster than previous, 65.25% faster than first)
Neg400To400BadToGood06Consolidated:           17,972,542,268 (  -7.47%   faster than previous, 62.65% faster than first)
Neg400To400BadToGood07EasiestOr1st:           18,192,790,973 (  -1.22%   faster than previous, 62.20% faster than first)
Neg400To400EvenBetter:                        17,386,673,086 (   4.43%   faster than previous, 63.87% faster than first)


PasswordRegexTwoRules: ^(?:(?=.*[a-z])(?=.*[A-Z])|(?=.*[a-z])(?=.*[0-9])|(?=.*[a-z])(?=.*[><?.,!@#$%^&*+=_)(\}\{\]\[])|(?=.*[A-Z])(?=.*[0-9])|(?=.*[A-Z])(?=.*[><?.,!@#$%^&*+=_)(\}\{\]\[])|(?=.*[A-Z])(?=.*[><?.,!@#$%^&*+=_)(\}\{\]\[]))[A-Za-z0-9><?.,!@#$%^&*+=_)(\}\{\]\[]{8,24}$

public static final String SPECIAL_CHARS = "><?.,!@#$%^&*+=_)(\\}\\{\\]\\[";
public static final String LKA_LOWER = "(?=.*[a-z])";    //LKA: lookahead
public static final String LKA_UPPER = "(?=.*[A-Z])";
public static final String LKA_DIGIT = "(?=.*[0-9])";
public static final String LKA_SPECIAL = "(?=.*[" + SPECIAL_CHARS + "])";

private static final String REGEX = "" +
   "^" +                                //start of input
      "(?:" +                           //non capturing group
         LKA_LOWER + LKA_UPPER +              //Option 1
         "|" +                                   //or
         LKA_LOWER + LKA_DIGIT +              //Option 2
         "|" +                                   //or
         LKA_LOWER + LKA_SPECIAL +            //Option 3
         "|" +                                   //or
         LKA_UPPER + LKA_DIGIT +              //Option 4
         "|" +                                   //or
         LKA_UPPER + LKA_SPECIAL +            //Option 5
         "|" +                                   //or
         LKA_UPPER + LKA_SPECIAL +            //Option 6
      ")" +                              //end of non-capturing group
   "[A-Za-z0-9" + SPECIAL_CHARS + "]" +  //All possible characters
   "{8,24}" +                            //8 to 24 chars
   "$";                                  //end of input


100000 iterations
PasswordRegexTwoRules: 3,972,150,080


public class PasswordLogicTwoRules {

	public static final int MIN_LENGTH = 8;
	public static final int RULE_COUNT = 2;

	private Matcher lowerCaseMatcher;
	private Matcher upperCaseMatcher;
	private Matcher digitMatcher;
	private Matcher symbolMatcher;
	private Matcher whitespaceMatcher;

	public PasswordLogicTwoRules() {
	   lowerCaseMatcher = Pattern.compile("[a-z]").matcher(IGNORED_INPUT);
	   upperCaseMatcher = Pattern.compile("[A-Z]").matcher(IGNORED_INPUT);
	   digitMatcher = Pattern.compile("[0-9]").matcher(IGNORED_INPUT);
	   symbolMatcher = Pattern.compile("[!@#$%^&+=_)(}{\\]\\[]").matcher(IGNORED_INPUT);
	   whitespaceMatcher = Pattern.compile("\\s").matcher(IGNORED_INPUT);
	}

	public boolean isPasswordValid(String password) {
	   System.out.println(getClass().getName());
	   int specialRulesFollowed =
	         (lowerCaseMatcher.reset(password).find() ? 1 : 0) +
	         (upperCaseMatcher.reset(password).find() ? 1 : 0) +
	         (digitMatcher.reset(password).find() ? 1 : 0) +
	         (symbolMatcher.reset(password).find() ? 1 : 0);
	   boolean hasWhitespace = whitespaceMatcher.reset(password).find();
	   boolean isLongEnough = (password.length() >= MIN_LENGTH);

	   return ((specialRulesFollowed >= RULE_COUNT) && isLongEnough
	           && !hasWhitespace);
	}
}

100000 iterations
PasswordRegexTwoRules: 3,972,150,080
PasswordLogicTwoRules:   745,107,773 (81.24% faster than previous)

^(?:(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])|(?=.*[a-z])(?=.*[A-Z])(?=.*[><?.,!@#$%^&*+=_)(\}\{\]\[])|(?=.*[a-z])(?=.*[0-9])(?=.*[><?.,!@#$%^&*+=_)(\}\{\]\[])|(?=.*[A-Z])(?=.*[0-9])(?=.*[><?.,!@#$%^&*+=_)(\}\{\]\[]))[A-Za-z0-9><?.,!@#$%^&*+=_)(\}\{\]\[]{8,24}$

public static final String SPECIAL_CHARS = "><?.,!@#$%^&*+=_)(\\}\\{\\]\\[";
public static final String LKA_LOWER = "(?=.*[a-z])";    //LKA: lookahead
public static final String LKA_UPPER = "(?=.*[A-Z])";
public static final String LKA_DIGIT = "(?=.*[0-9])";
public static final String LKA_SPECIAL = "(?=.*[" + SPECIAL_CHARS + "])";

public static final String REGEX = "" +
   "^" +                                       //start of input
      "(?:" +                                     //non capturing group
         LKA_LOWER + LKA_UPPER + LKA_DIGIT +         //Option 1
         "|" +                                          //or
         LKA_LOWER + LKA_UPPER + LKA_SPECIAL +       //Option 2
         "|" +                                          //or
         LKA_LOWER + LKA_DIGIT + LKA_SPECIAL +       //Option 3
         "|" +                                          //or
         LKA_UPPER + LKA_DIGIT + LKA_SPECIAL +       //Option 4
      ")" +                                       //end non-capturing group
      "[A-Za-z0-9" + SPECIAL_CHARS + "]" +     //all legal characters
      "{8,24}" +                               //8 to 24 chars
   "$";                                        //end of input

Matcher matcher = Pattern.compile(REGEX).matcher("ignored input");
String potentialPassword = "abcABC123$*&%"
...
boolean isValid = matcher.reset(potentialPassword).matches();
System.out.println(isValid);        //"true"

100000 iterations
PasswordRegexThreeRules: 1,573,514,573
PasswordLogicThreeRules:   543,115,799 (65.48% faster than previous)

String toSplit = "one two three four five";
...
String[] splits = toSplit.split(" ");
System.out.println(Arrays.stream(splits).collect(joining(" "));   //"one two three four five"

100000 iterations
Regex: " "
StringDotSplit:       522,078,318

String toSplit = "one two three four five";
...
String[] splits = Pattern.compile(" ").split(toSplit);
System.out.println(Arrays.stream(splits).collect(joining(" "));   //"one two three four five"

100000 iterations
Regex: " "
StringDotSplit:       522,078,318
PatternDotSplit:      680,520,660 (-30.35% faster than previous)


Pattern pattern = Pattern.compile(" ");
String toSplit = "one two three four five";
...
String[] splits = pattern.split(toSplit);
System.out.println(Arrays.stream(splits).collect(joining(" "));   //"one two three four five"

100000 iterations
Regex: " "
StringDotSplit:       522,078,318
PatternDotSplit:      680,520,660 (-30.35% faster than previous)
ReusedPatternSplit:   498,117,692 (26.80% faster than previous,    4.59% than first)


String toSplit = "one two three four five";
String splitsJoined = pattern.splitAsStream(input).collect(
      joining(CLOSE_QT_COMMA_OPEN_QT, "\"", "\""));
System.out.println(splitsJoined);   //"one two three four five"

100000 iterations
Regex: " "
StringDotSplit:       522,078,318
PatternDotSplit:      680,520,660 (-30.35% faster than previous)
ReusedPatternSplit:   498,117,692 (26.80% faster than previous,    4.59% than first)
PatternSplitAsStream: 676,661,368 (-35.84% faster than previous, -29.61% than first)

100000 iterations
Regex: "[,./ ]+"
StringDotSplit: 776,093,112
PatternDotSplit: 858,004,768 (-10.55% faster than previous)
ReusedPatternSplit: 549,463,008 (35.96% faster than previous, 29.20% than first)
PatternSplitAsStream: 702,916,075 (-27.93% faster than previous, 9.43% than first)


String input = "One, two, three. four/five six";
String regex = "[,./ ]+"
String replaceWith = "---";
...
String output = input.replaceAll(regex, replaceWith);
System.out.println(output);   //"One---two---three---four---five---six"

100000 iterations
StringDotReplaceAll: 526,316,515


String input = "One, two, three. four/five six";
String regex = "[,./ ]+"
String replaceWith = "---";
...
String output = Pattern.compile(regex).matcher(input).replaceAll(replaceWith);
System.out.println(output);   //"One---two---three---four---five---six"

100000 iterations
StringDotReplaceAll: 526,316,515
PatternDotReplaceAll: 447,841,131 (14.91% faster than previous)


String input = "One, two, three. four/five six";
String regex = "[,./ ]+"
String replaceWith = "---";
...
Pattern pattern = Pattern.compile(regex);
String output = pattern.matcher(input).replaceAll(replaceWith);
System.out.println(output);   //"One---two---three---four---five---six"

100000 iterations
StringDotReplaceAll: 526,316,515
PatternDotReplaceAll: 447,841,131 (14.91% faster than previous)
ReusedPatternReplaceAll: 352,345,270 (21.32% faster than previous, 33.05% than first)


String input = "One, two, three. four/five six";
String regex = "[,./ ]+"
String replaceWith = "---";
...
Matcher matcher = Pattern.compile(regex).matcher("ignored input");
String output = matcher.reset(input).replaceAll(replaceWith);
System.out.println(output);   //"One---two---three---four---five---six"


100000 iterations
StringDotReplaceAll: 526,316,515
PatternDotReplaceAll: 447,841,131 (14.91% faster than previous)
ReusedPatternReplaceAll: 352,345,270 (21.32% faster than previous, 33.05% than first)
ReusedMatcherReplaceAll: 343,194,252 (2.60% faster than previous, 34.79% than first)


100000 iterations
RangeRegexUnanchoredFind: 1,515,511,589


100000 iterations
RangeRegexUnanchoredFind: 1,515,511,589
RangeRegexAnchoredFind: 323,075,406 (78.68% faster than previous)


100000 iterations
RangeRegexUnanchoredFind: 1,515,511,589
RangeRegexAnchoredFind: 323,075,406 (78.68% faster than previous)
RangeRegexUnanchoredMatches: 1,425,393,173 (-341.20% faster than previous, 5.95% than first)


100000 iterations
RangeRegexUnanchoredFind: 1,515,511,589
RangeRegexAnchoredFind: 323,075,406 (78.68% faster than previous)
RangeRegexUnanchoredMatches: 1,425,393,173 (-341.20% faster than previous, 5.95% than first)
NumericRangeLogic: 155,220,473 (89.11% faster than previous, 89.76% than first)
