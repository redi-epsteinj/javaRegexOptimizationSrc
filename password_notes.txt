


PasswordRegexTwoRules: 

^(?:(?=.*[a-z])(?=.*[A-Z])|(?=.*[a-z])(?=.*[0-9])|(?=.*[a-z])(?=.*[><?.,!@#$%^&*+=_)(\}\{\]\[])|(?=.*[A-Z])(?=.*[0-9])|(?=.*[A-Z])(?=.*[><?.,!@#$%^&*+=_)(\}\{\]\[])|(?=.*[A-Z])(?=.*[><?.,!@#$%^&*+=_)(\}\{\]\[]))[A-Za-z0-9><?.,!@#$%^&*+=_)(\}\{\]\[]{8,24}$

public static final String SPECIAL_CHARS = "><?.,!@#$%^&*+=_)(\\}\\{\\]\\[";
public static final String LKA_LOWER = "(?=.*[a-z])";    //LKA: lookahead
public static final String LKA_UPPER = "(?=.*[A-Z])";
public static final String LKA_DIGIT = "(?=.*[0-9])";
public static final String LKA_SPECIAL = "(?=.*[" + SPECIAL_CHARS + "])";

private static final String REGEX = "" +
   "^" +                                //start of input
      "(?:" +                           //non capturing group
         LKA_LOWER + LKA_UPPER +              //Option 1
         "|" +                                   //or
         LKA_LOWER + LKA_DIGIT +              //Option 2
         "|" +                                   //or
         LKA_LOWER + LKA_SPECIAL +            //Option 3
         "|" +                                   //or
         LKA_UPPER + LKA_DIGIT +              //Option 4
         "|" +                                   //or
         LKA_UPPER + LKA_SPECIAL +            //Option 5
         "|" +                                   //or
         LKA_UPPER + LKA_SPECIAL +            //Option 6
      ")" +                              //end of non-capturing group
   "[A-Za-z0-9" + SPECIAL_CHARS + "]" +  //All possible characters
   "{8,24}" +                            //8 to 24 chars
   "$";                                  //end of input


Test special and digit


PasswordRegexThreeRules: 

^(?:(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])|(?=.*[a-z])(?=.*[A-Z])(?=.*[><?.,!@#$%^&*+=_)(\}\{\]\[])|(?=.*[a-z])(?=.*[0-9])(?=.*[><?.,!@#$%^&*+=_)(\}\{\]\[])|(?=.*[A-Z])(?=.*[0-9])(?=.*[><?.,!@#$%^&*+=_)(\}\{\]\[]))[A-Za-z0-9><?.,!@#$%^&*+=_)(\}\{\]\[]{8,24}$

public static final String SPECIAL_CHARS = "><?.,!@#$%^&*+=_)(\\}\\{\\]\\[";
public static final String LKA_LOWER = "(?=.*[a-z])";    //LKA: lookahead
public static final String LKA_UPPER = "(?=.*[A-Z])";
public static final String LKA_DIGIT = "(?=.*[0-9])";
public static final String LKA_SPECIAL = "(?=.*[" + SPECIAL_CHARS + "])";

public static final String REGEX = "" +
   "^" +                                       //start of input
      "(?:" +                                     //non capturing group
         LKA_LOWER + LKA_UPPER + LKA_DIGIT +         //Option 1
         "|" +                                          //or
         LKA_LOWER + LKA_UPPER + LKA_SPECIAL +       //Option 2
         "|" +                                          //or
         LKA_LOWER + LKA_DIGIT + LKA_SPECIAL +       //Option 3
         "|" +                                          //or
         LKA_UPPER + LKA_DIGIT + LKA_SPECIAL +       //Option 4
      ")" +                                       //end non-capturing group
      "[A-Za-z0-9" + SPECIAL_CHARS + "]" +     //all legal characters
      "{8,24}" +                               //8 to 24 chars
   "$";                                        //end of input

Matcher matcher = Pattern.compile(REGEX).matcher("ignored input");
String potentialPassword = "abcABC123$*&%"
...
boolean isValid = matcher.reset(potentialPassword).matches();
System.out.println(isValid);        //"true"


public class PasswordLogicTwoRules {

   public static final int MIN_LENGTH = 8;
   public static final int RULE_COUNT = 2;

   private Matcher lowerCaseMatcher;
   private Matcher upperCaseMatcher;
   private Matcher digitMatcher;
   private Matcher symbolMatcher;
   private Matcher whitespaceMatcher;

   public PasswordLogicTwoRules() {
      lowerCaseMatcher = matcherForRegex("[a-z]");
      upperCaseMatcher = matcherForRegex("[A-Z]");
      digitMatcher = matcherForRegex("[0-9]");
      symbolMatcher = matcherForRegex("[!@#$%^&+=_)(}{\\]\\[]");
      whitespaceMatcher = matcherForRegex("\\s");
   }

   private Matcher matcherForRegex(String regex) {
      return Pattern.compile("[a-z]").matcher("ignored input");
   }

   public boolean isPasswordValid(String password) {
      System.out.println(getClass().getName());
      int specialRulesFollowed =
            (lowerCaseMatcher.reset(password).find() ? 1 : 0) +   //SHORT CIRCUIT
            (upperCaseMatcher.reset(password).find() ? 1 : 0) +
            (digitMatcher.reset(password).find() ? 1 : 0) +
            (symbolMatcher.reset(password).find() ? 1 : 0);
      boolean hasWhitespace = whitespaceMatcher.reset(password).find();
      boolean isLongEnough = (password.length() >= MIN_LENGTH);

      return ((specialRulesFollowed >= RULE_COUNT) && isLongEnough
              && !hasWhitespace);
   }
}

(100,000 iterations)
RegexTwoRules:         2,722,639,498                  
LogicTwoRules:           593,202,203 (78.21% prev)    

(100,000 iterations)  
RegexThreeRules:       1,675,162,125                  
LogicThreeRules:        511,055,436 (69.49% prev) 

